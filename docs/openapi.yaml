openapi: 3.1.0
info:
  title: Evently API
  version: 1.0.0
servers:
  - url: http://localhost:3001
paths:
  /health:
    get:
      summary: Vérifie la disponibilité de l’API
      responses:
        '200':
          description: Statut OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
  /api/events:
    get:
      summary: Liste les événements (optionnellement à venir)
      parameters:
        - in: query
          name: upcoming
          schema:
            type: boolean
          description: Filtrer sur les événements dont la date de début est future
      responses:
        '200':
          description: Liste des événements
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventSummary'
    post:
      summary: Crée un nouvel événement
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventCreateInput'
      responses:
        '201':
          description: Événement créé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventDetail'
  /api/events/{id}:
    get:
      summary: Récupère le détail d’un événement
      parameters:
        - $ref: '#/components/parameters/EventId'
      responses:
        '200':
          description: Événement détaillé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventDetail'
  /api/events/{id}/register:
    post:
      summary: Crée une inscription pour un utilisateur
      parameters:
        - $ref: '#/components/parameters/EventId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  format: uuid
              required:
                - userId
      responses:
        '201':
          description: Inscription créée
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Registration'
  /api/registrations/{id}/tickets:
    post:
      summary: Émet un ticket pour une inscription (transactionnel)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                price:
                  type: number
                  minimum: 0
              required:
                - price
      responses:
        '201':
          description: Ticket créé
  /api/events/{id}/feed:
    get:
      summary: Récupère le flux d’activité d’un événement (MongoDB)
      parameters:
        - $ref: '#/components/parameters/EventId'
      responses:
        '200':
          description: Flux d’activité
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeedResponse'
    post:
      summary: Ajoute une entrée de flux (commentaire, check-in, etc.)
      parameters:
        - $ref: '#/components/parameters/EventId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeedEntryInput'
      responses:
        '201':
          description: Entrée ajoutée
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeedEntry'
  /api/events/{id}/analytics:
    get:
      summary: Statistiques agrégées du flux MongoDB
      parameters:
        - $ref: '#/components/parameters/EventId'
      responses:
        '200':
          description: Données analytiques
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalyticsResponse'
  /api/users:
    get:
      summary: Liste des utilisateurs (sélection pour inscription)
      responses:
        '200':
          description: Utilisateurs disponibles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /api/organizers:
    get:
      summary: Liste les organisateurs
      responses:
        '200':
          description: Organisateurs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Organizer'
  /api/venues:
    get:
      summary: Liste les lieux
      responses:
        '200':
          description: Lieux
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Venue'

components:
  parameters:
    EventId:
      name: id
      in: path
      required: true
      schema:
        type: string
        format: uuid
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        email:
          type: string
        role:
          type: string
          enum: [ADMIN, USER]
    Organizer:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
    Venue:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        address:
          type: string
        capacity:
          type: integer
          minimum: 0
    EventSummary:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
          nullable: true
        startAt:
          type: string
          format: date-time
        endAt:
          type: string
          format: date-time
        capacity:
          type: integer
        status:
          type: string
          enum: [DRAFT, PUBLISHED, CLOSED]
        organizer:
          $ref: '#/components/schemas/Organizer'
        venue:
          $ref: '#/components/schemas/Venue'
        registrationCount:
          type: integer
    EventDetail:
      allOf:
        - $ref: '#/components/schemas/EventSummary'
        - type: object
          properties:
            registrations:
              type: array
              items:
                $ref: '#/components/schemas/Registration'
    EventCreateInput:
      type: object
      required:
        - title
        - startAt
        - endAt
        - capacity
        - organizerId
        - venueId
      properties:
        title:
          type: string
        description:
          type: string
          nullable: true
        startAt:
          type: string
          format: date-time
        endAt:
          type: string
          format: date-time
        capacity:
          type: integer
          minimum: 0
        status:
          type: string
          enum: [DRAFT, PUBLISHED, CLOSED]
        organizerId:
          type: string
          format: uuid
        venueId:
          type: string
          format: uuid
    Registration:
      type: object
      properties:
        id:
          type: string
        status:
          type: string
          enum: [PENDING, CONFIRMED, CANCELLED]
        createdAt:
          type: string
          format: date-time
        user:
          $ref: '#/components/schemas/User'
    FeedEntry:
      type: object
      properties:
        type:
          type: string
          enum: [COMMENT, CHECKIN, PHOTO]
        payload:
          type: object
          additionalProperties: true
        ts:
          type: string
          format: date-time
    FeedEntryInput:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          enum: [COMMENT, CHECKIN, PHOTO]
        payload:
          type: object
          additionalProperties: true
    FeedResponse:
      type: object
      properties:
        eventId:
          type: string
        entries:
          type: array
          items:
            $ref: '#/components/schemas/FeedEntry'
    AnalyticsResponse:
      type: object
      properties:
        byType:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
              count:
                type: integer
        checkinsBySource:
          type: array
          items:
            type: object
            properties:
              source:
                type: string
                nullable: true
              count:
                type: integer
